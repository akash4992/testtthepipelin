name: build-deploy-go-api

on:
  push:
    branches:
      - develop
      - qa
      - staging
      - main

  workflow_dispatch:
    inputs:
      environment:
        required: true
        description: Select the environment
        type: choice
        options:
          - dev1
          - dev2
          - qa

permissions:
  id-token: write
  contents: write

env:
  IMAGE_TAG: latest
  AWS_REGION: "us-east-1"

jobs:
  resolve-env:
    name: Resolve Environment Name
    runs-on: ubuntu-latest
    outputs:
      environment_name: ${{ steps.setenv.outputs.environment_name }}

    steps:
      - name: Determine environment name
        id: setenv
        shell: bash
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "environment_name=${{ github.event.inputs.environment }}" >> "$GITHUB_OUTPUT"
          elif [ "${{ github.ref_name }}" == "main" ]; then
            echo "environment_name=production" >> "$GITHUB_OUTPUT"
          elif [ "${{ github.ref_name }}" == "develop" ]; then
            echo "environment_name=development" >> "$GITHUB_OUTPUT"
          else
            echo "environment_name=${{ github.ref_name }}" >> "$GITHUB_OUTPUT"
          fi

  build:
    name: Build and Deploy go-api
    needs: resolve-env
    runs-on: ubuntu-latest
    environment:
      name: ${{ needs.resolve-env.outputs.environment_name }}

    steps:
      - name: Install Go Tools
        run: go install golang.org/x/vuln/cmd/govulncheck@latest

      - name: Set environment-specific variables
        run: |
          echo "ENVIRONMENT_NAME=${{ needs.resolve-env.outputs.environment_name }}" >> $GITHUB_ENV

          if [ "${{ needs.resolve-env.outputs.environment_name }}" == "development" ]; then
            echo "ECR_REPOSITORY=development-go-api" >> $GITHUB_ENV
            echo "ECS_CLUSTER=development-cluster" >> $GITHUB_ENV
            echo "SERVICE_NAME=dev-go-api" >> $GITHUB_ENV

          elif [ "${{ needs.resolve-env.outputs.environment_name }}" == "dev2" ]; then
            echo "ECR_REPOSITORY=dev2-app-api" >> $GITHUB_ENV
            echo "ECS_CLUSTER=development-cluster" >> $GITHUB_ENV
            echo "SERVICE_NAME=dev2-app-api" >> $GITHUB_ENV

          elif [ "${{ needs.resolve-env.outputs.environment_name }}" == "qa" ]; then
            echo "ECR_REPOSITORY=qa-go-api" >> $GITHUB_ENV
            echo "ECS_CLUSTER=qa-cluster" >> $GITHUB_ENV
            echo "SERVICE_NAME=qa-go-api" >> $GITHUB_ENV

          elif [ "${{ needs.resolve-env.outputs.environment_name }}" == "staging" ]; then
            echo "ECR_REPOSITORY=staging-go-api" >> $GITHUB_ENV
            echo "ECS_CLUSTER=staging-cluster" >> $GITHUB_ENV
            echo "SERVICE_NAME=staging-go-api" >> $GITHUB_ENV

          elif [ "${{ needs.resolve-env.outputs.environment_name }}" == "production" ]; then
            echo "ECR_REPOSITORY=prod-app-api" >> $GITHUB_ENV
            echo "ECS_CLUSTER=production-cluster" >> $GITHUB_ENV
            echo "SERVICE_NAME=prod-app-api" >> $GITHUB_ENV

          else
            echo "Invalid environment: ${{ needs.resolve-env.outputs.environment_name }}"
            exit 1
          fi

      - name: Wait for ECS deployment to stabilize
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
          CLUSTER_NAME: ${{ env.ECS_CLUSTER }}
          SERVICE_NAME: ${{ env.SERVICE_NAME }}
          REO_NAME: ${{ env.ECR_REPOSITORY }}
        run: |
          echo "AWS Region: ${AWS_REGION}"
          echo "Service Name: ${SERVICE_NAME}"
          echo "Repository Name: ${REO_NAME}"
          echo "Cluster Name: ${CLUSTER_NAME}"
